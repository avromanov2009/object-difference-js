!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("ObjDiff",[],e):"object"==typeof exports?exports.ObjDiff=e():t.ObjDiff=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n={ObjectDifference:r(1).GetObjectDifference};e.default=n,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GetObjectDifference=function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return h("",t,e,r,n)};var n,o=(n=r(2))&&n.__esModule?n:{default:n};function f(t){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var u="created",i="updated",c="deleted",a="NA";function p(t){return""===t||0===t||null==t||t==={}||Array.isArray(t)&&t.length<1}function y(t){return!p(t)&&("boolean"==typeof t||"number"==typeof t||"string"==typeof t)}function l(t){return!p(t)&&t instanceof Date}function d(t){return!p(t)&&Array.isArray(t)}function s(t){return"function"==typeof t}function m(t){return"symbol"===f(t)}function b(t){return!(y(t)||p(t)||l(t)||d(t)||s(t)||m(t))}function g(t,e){return t?"".concat(t,".").concat(e):e}function v(t,e,r,n){var o=[];if(r.length===n.length){for(var f=0;f<r.length;f++)if(JSON.stringify(r[f])!==JSON.stringify(n[f]))for(var u=0;u<r.length;u++)o=o.concat(h(g(t,e),"[".concat(u,"]"),r[u],n[u]));return o}if(r.length>30||n.length>30)return o.push({property:g(t,e),type:i,from:"Array[".concat(r.length,"]"),to:"Array[".concat(n.length,"]")}),o;function c(t){return function(e){return 0===t.filter(function(t){return JSON.stringify(t)===JSON.stringify(e)}).length}}for(var a=r.filter(c(n)),p=n.filter(c(r)),y=0;y<a.length;y++)o=o.concat(h(g(t,e),"[".concat(y,"]"),a[y],void 0));for(var l=0;l<p.length;l++)o=o.concat(h(g(t,e),"[".concat(l,"]"),void 0,p[l]));return o}function h(t,e,r,n){var f=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},O=[];if("__ob__"===e||"__proto__"===e)return O;if(y(r)&&y(n))return r==n?O:(O.push({property:g(t,e),type:i,from:r,to:n}),O);if(s(r)||s(n))return O.push({property:g(t,e),type:a,from:(0,o.default)(r),to:(0,o.default)(n)}),O;if(m(r)||m(n))return O.push({property:g(t,e),type:i,from:(0,o.default)(r),to:(0,o.default)(n)}),O;if(l(r)&&l(n))return r.getTime()===n.getTime()?O:(O.push({property:g(t,e),type:i,from:(0,o.default)(r),to:(0,o.default)(n)}),O);if(l(n)&&y(r))return new Date(r).getTime()===n.getTime()?O:(O.push({property:g(t,e),type:i,from:(0,o.default)(r),to:(0,o.default)(n)}),O);if(l(r)&&y(n))return new Date(n).getTime()===r.getTime()?O:(O.push({property:g(t,e),type:i,from:(0,o.default)(r),to:(0,o.default)(n)}),O);if(p(r)&&p(n))return O;if(p(r)&&y(n))return n?(O.push({property:g(t,e),type:u,from:"",to:(0,o.default)(n)}),O):O;if(p(r)&&l(n))return O.push({property:g(t,e),type:u,from:"",to:(0,o.default)(n)}),O;if(p(r)&&d(n)){for(var j=0;j<n.length;j++)O=O.concat(h(g(t,e),"[".concat(j,"]"),void 0,n[j]));return O}if(p(r)&&b(n))return Object.getOwnPropertyNames(n).forEach(function(r,o,f){O=O.concat(h(g(t,e),r,void 0,n[r]))}),O;if((y(r)||l(r)||d(r)||b(r))&&p(n))return r?(O.push({property:g(t,e),type:c,from:"",to:""}),O):O;if((y(r)||l(r))&&d(n)){O.push({property:g(t,e),type:c,from:"",to:""});for(var S=0;S<n.length;S++)O=O.concat(h(g(t,e),"[".concat(S,"]"),void 0,n[S]));return O}if((y(r)||l(r))&&b(n))return O.push({property:g(t,e),type:c,from:"",to:""}),Object.getOwnPropertyNames(n).forEach(function(r,o,f){O=O.concat(h(g(t,e),r,void 0,n[r]))}),O;if(d(r)&&(y(n)||l(n)))return O.push({property:g(t,e),type:i,from:"Array[".concat(r.length,"]"),to:(0,o.default)(n)}),O;if(d(r)&&d(n)){if(f.ArrayKeyProperty){for(var _=!1,P=0;P<r.length;P++)void 0===r[P][f.ArrayKeyProperty]&&(_=!0);for(var A=0;A<n.length;A++)void 0===n[A][f.ArrayKeyProperty]&&(_=!0);O=_?O.concat(v(t,e,r,n)):O.concat(function(t,e,r,n,o){var f=[];function u(t){return function(e){return 0===t.filter(function(t){return t[o]===e[o]}).length}}for(var i=r.filter(u(n)),c=n.filter(u(r)),a=0;a<i.length;a++)f=f.concat(h(g(t,e),"[".concat(o,"=").concat(i[a][o],"]"),i[a],void 0));for(var p=0;p<c.length;p++)f=f.concat(h(g(t,e),"[".concat(o,"=").concat(c[p][o],"]"),void 0,c[p]));for(var y=function(u){var i=n.find(function(t){return t[o]===r[u][o]});i&&(f=f.concat(h(g(t,e),"[".concat(o,"=").concat(r[u][o],"]"),r[u],i)))},l=0;l<r.length;l++)y(l);return f}(t,e,r,n,f.ArrayKeyProperty))}else O=O.concat(v(t,e,r,n));return O}if(d(r)&&b(n))return O.push({property:g(t,e),type:c,from:"Array[".concat(r.length,"]"),to:""}),Object.getOwnPropertyNames(n).forEach(function(r,o,f){O=O.concat(h(g(t,e),r,void 0,n[r]))}),O;if(b(r)&&(y(n)||l(n)))return O.push({property:g(t,e),type:i,from:"{}",to:(0,o.default)(n)}),O;if(b(r)&&d(n)){O.push({property:g(t,e),type:c,from:"{}",to:(0,o.default)(n)});for(var x=0;x<n.length;x++)O=O.concat(h(g(t,e),"[".concat(x,"]"),void 0,n[x]));return O}return b(r)&&b(n)&&(Object.getOwnPropertyNames(r).forEach(function(o,f,u){O=O.concat(h(g(t,e),o,r[o],n[o]))}),Object.getOwnPropertyNames(n).forEach(function(o,f,u){void 0===r[o]&&(O=O.concat(h(g(t,e),o,void 0,n[o])))})),O}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e){if("boolean"==typeof e||"number"==typeof e||"string"==typeof e)return e.toString();if(null===e)return"null";if(void 0===e)return"undefined";if("symbol"===n(e))return"symbol";if(e instanceof Date)return e.toUTCString();if(Array.isArray(e))return e.map(function(e){return t(e)}).join(", ");if("function"==typeof e)return"function";return JSON.stringify(e)},t.exports=e.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,