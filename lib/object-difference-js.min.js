!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("object-difference-js",[],e):"object"==typeof exports?exports["object-difference-js"]=e():t["object-difference-js"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n={ObjectDifference:r(1).GetObjectDifference};e.default=n,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GetObjectDifference=function(t,e,r){return m("",t,e,r)};var n,o=(n=r(2))&&n.__esModule?n:{default:n};var f="created",u="updated",i="deleted",c="NA";function p(t){return""===t||0===t||null==t||t==={}||Array.isArray(t)&&t.length<1}function a(t){return!p(t)&&("boolean"==typeof t||"number"==typeof t||"string"==typeof t)}function y(t){return!p(t)&&t instanceof Date}function l(t){return!p(t)&&Array.isArray(t)}function d(t){return"function"==typeof t}function s(t){return!(a(t)||p(t)||y(t)||l(t)||d(t))}function b(t,e){return t?"".concat(t,".").concat(e):e}function m(t,e,r,n){var g=[];if("__ob__"===e||"__proto__"===e)return g;if(a(r)&&a(n))return r===n?g:(g.push({property:b(t,e),type:u,from:r,to:n}),g);if(d(r)||d(n))return g.push({property:b(t,e),type:c,from:(0,o.default)(r),to:(0,o.default)(n)}),g;if(y(r)&&y(n))return r.getTime()===n.getTime()?g:(g.push({property:b(t,e),type:u,from:(0,o.default)(r),to:(0,o.default)(n)}),g);if(y(r)&&a(n)||y(n)&&a(r))return g.push({property:b(t,e),type:u,from:(0,o.default)(r),to:(0,o.default)(n)}),g;if(p(r)&&p(n))return g;if(p(r)&&a(n))return g.push({property:b(t,e),type:f,from:"",to:(0,o.default)(n)}),g;if(p(r)&&y(n))return g.push({property:b(t,e),type:f,from:"",to:(0,o.default)(n)}),g;if(p(r)&&l(n)){for(var h=0;h<n.length;h++)g=g.concat(m(b(t,e),"[".concat(h,"]"),void 0,n[h]));return g}if(p(r)&&s(n))return Object.getOwnPropertyNames(n).forEach(function(r,o,f){g=g.concat(m(b(t,e),r,void 0,n[r]))}),g;if((a(r)||y(r)||l(r)||s(r))&&p(n))return g.push({property:b(t,e),type:i,from:"",to:""}),g;if((a(r)||y(r))&&l(n)){g.push({property:b(t,e),type:i,from:"",to:""});for(var v=0;v<n.length;v++)g=g.concat(m(b(t,e),"[".concat(v,"]"),void 0,n[v]));return g}if((a(r)||y(r))&&s(n))return g.push({property:b(t,e),type:i,from:"",to:""}),Object.getOwnPropertyNames(n).forEach(function(r,o,f){g=g.concat(m(b(t,e),r,void 0,n[r]))}),g;if(l(r)&&(a(n)||y(n)))return g.push({property:b(t,e),type:u,from:"Array[".concat(r.length,"]"),to:(0,o.default)(n)}),g;if(l(r)&&l(n))return g=g.concat(function(t,e,r,n){var o=[];if(r.length===n.length){for(var f=0;f<r.length;f++)if(JSON.stringify(r)!==JSON.stringify(n))for(var i=0;i<r.length;i++)o=o.concat(m(b(t,e),"[".concat(i,"]"),r[i],n[i]));return o}if(r.length>30||n.length>30)return o.push({property:b(t,e),type:u,from:"Array[".concat(r.length,"]"),to:"Array[".concat(n.length,"]")}),o;function c(t){return function(e){return 0===t.filter(function(t){return JSON.stringify(t)===JSON.stringify(e)}).length}}for(var p=r.filter(c(n)),a=n.filter(c(r)),y=0;y<p.length;y++)o=o.concat(m(b(t,e),"[".concat(y,"]"),p[y],void 0));for(var l=0;l<a.length;l++)o=o.concat(m(b(t,e),"[".concat(l,"]"),void 0,a[l]));return o}(t,e,r,n));if(l(r)&&l(n))return g.push({property:b(t,e),type:i,from:"Array[".concat(r.length,"]"),to:""}),Object.getOwnPropertyNames(n).forEach(function(r,o,f){g=g.concat(m(b(t,e),r,void 0,n[r]))}),g;if(s(r)&&(a(n)||y(n)))return g.push({property:b(t,e),type:u,from:"{}",to:(0,o.default)(n)}),g;if(s(r)&&l(n)){g.push({property:b(t,e),type:i,from:"{}",to:(0,o.default)(n)});for(var j=0;j<n.length;j++)g=g.concat(m(b(t,e),"[".concat(j,"]"),void 0,n[j]));return g}return s(r)&&s(n)&&(Object.getOwnPropertyNames(r).forEach(function(o,f,u){g=g.concat(m(b(t,e),o,r[o],n[o]))}),Object.getOwnPropertyNames(n).forEach(function(o,f,u){void 0===r[o]&&(g=g.concat(m(b(t,e),o,void 0,n[o])))})),g}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e){if("boolean"==typeof e||"number"==typeof e||"string"==typeof e)return e.toString();if(null===e)return"null";if(void 0===e)return"undefined";if("symbol"===n(e))return"symbol";if(e instanceof Date)return e.toUTCString();if(Array.isArray(e))return e.map(function(e){return t(e)}).join(", ");if("function"==typeof e)return"function";return JSON.stringify(e)},t.exports=e.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,